@page "/counter"
@inject WeatherForecastService Service
@using System.Timers
@implements IDisposable

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="m-2">
    <button disabled="@_timer.Enabled" class="btn btn-success" @onclick=this.Start>Start</button>
</div>

<div class="alert alert-info">
    @this.Message
</div>

<div hidden="@(errorMessage is null)" class="alert alert-danger">
    @this.errorMessage
</div>

@code {
    private System.Timers.Timer _timer = new System.Timers.Timer(2000);
    private string? Message;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        _timer.AutoReset = true;
        _timer.Elapsed += this.OnTimerElapsed;
    }

    protected void Start()
        => _timer.Enabled = true;

    // This invokes the handler on the UI Dispatcher context
    // and passes the task to the Await extension method on Task
    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
        => await this.InvokeAsync(this.RefreshData)
            .Await(null, this.HandleError);

    // Callback handler for the Await
    private void HandleError(Exception ex)
    {
        errorMessage = $"{ex.Message} at {DateTime.Now.ToLongTimeString()}";
        this.InvokeAsync(StateHasChanged);
    }

    private async Task RefreshData()
    {
        // Yield before we do anything so the Await handler gets any exceptions that are raised
        await Task.Yield();

        this.Message = DateTime.Now.ToLongTimeString();
        await this.Service.GetException(null);
        
        // Call StateHasChanged directly as the method is running in the Dispatcher context
        this.StateHasChanged();
    }

    public void Dispose()
        => _timer.Elapsed -= this.OnTimerElapsed;
}
